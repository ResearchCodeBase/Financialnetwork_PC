# -*- coding: utf-8 -*-
import numpy as np
import pandas as pd
def load_bank_importance(file_path):
    df = pd.read_csv(file_path)
    importance_values = df['外部资产'].values
    max_importance_value = importance_values.max()
    return importance_values, max_importance_value


def estimate_weighted_risk_probability(initial_probabilities, importance_values):
    quartiles = np.percentile(importance_values, [25, 50, 75])

    weighted_risk_probabilities = []

    for initial, importance in zip(initial_probabilities, importance_values):
        if importance <= quartiles[0]:
            weight = 0.25
        elif importance <= quartiles[1]:
            weight = 0.5
        elif importance <= quartiles[2]:
            weight = 0.75
        else:
            weight = 1.0

        weighted_risk_probability = initial * weight
        weighted_risk_probabilities.append(weighted_risk_probability)

    overall_weighted_risk_probability = np.mean(weighted_risk_probabilities) * 100
    return weighted_risk_probabilities, overall_weighted_risk_probability

US_inital = [
    0.17296218872070312, 0.26192358136177063, 0.20594942569732666, 0.3896801769733429,
    0.1615583300590515, 0.4732709228992462, 0.2747576832771301, 0.42703378200531006,
    0.4413047730922699, 0.05992280691862106, 0.09005117416381836, 0.1003674790263176,
    0.38089391589164734, 0.09776170551776886, 0.6277849674224854, 0.07652214169502258,
    0.0798337310552597, 0.06425288319587708, 0.05600299313664436, 0.1315348595380783,
    0.06300778687000275, 0.06049320101737976, 0.05987019091844559, 0.4921739399433136,
    0.32416561245918274, 0.24395495653152466, 0.6373195648193359, 0.1009453758597374,
    0.3404648005962372, 0.09655683487653732, 0.38242030143737793, 0.5705010294914246,
    0.3177412152290344, 0.6519713997840881, 0.4360427260398865, 0.2629222869873047,
    0.543464183807373, 0.09182446449995041, 0.7561612725257874, 0.3971530795097351,
    0.6680193543434143, 0.7119938731193542, 0.21779853105545044, 0.45294708013534546,
    0.15676121413707733, 0.6135485768318176, 0.6885590553283691, 0.22620359063148499,
    0.11770305037498474, 0.06730663031339645, 0.5436629056930542, 0.5383957624435425,
    0.4547344148159027, 0.5240271687507629, 0.16879837214946747, 0.6531614065170288,
    0.23507139086723328, 0.5369071960449219, 0.5463983416557312, 0.11806973814964294,
    0.22488844394683838, 0.38869336247444153, 0.5250138640403748, 0.6303642988204956,
    0.5402778387069702, 0.13036499917507172, 0.6654654145240784, 0.5805932879447937,
    0.5386828184127808, 0.11734741181135178, 0.389680415391922
]

US_final=[
    0.00023296142171602696, 0.0026317955926060677, 0.000648553716018796, 0.03730490803718567,
    0.15484672784805298, 0.4814753830432892, 0.0036235980223864317, 0.07165878266096115,
    0.09182476252317429, 0.033909570425748825, 0.09000157564878464, 0.100334033370018,
    0.030865896493196487, 0.058643683791160583, 0.16745151579380035, 0.07647334784269333,
    0.06916336715221405, 0.06455826014280319, 0.055946558713912964, 0.12972180545330048,
    0.041077785193920135, 0.060689471662044525, 0.05984067544341087, 0.49212902784347534,
    0.14432968199253082, 0.24393898248672485, 0.6373071670532227, 0.10090567916631699,
    0.34045785665512085, 0.04865450784564018, 0.16100025177001953, 0.5704751014709473,
    0.3174452483654022, 0.2714429497718811, 0.27362027764320374, 0.0026050242595374584,
    0.543464183807373, 0.09176403284072876, 0.7561608552932739, 0.39709651470184326,
    0.6680139303207397, 0.7119908928871155, 0.11302723735570908, 0.10982850939035416,
    0.15726488828659058, 0.6135246157646179, 0.23303288221359253, 0.2261924147605896,
    0.11769397556781769, 0.06727186590433121, 0.3855728805065155, 0.5383957624435425,
    0.4547269940376282, 0.5240168571472168, 0.1687900424003601, 0.6531581282615662,
    0.23506952822208405, 0.39453718066215515, 0.12637311220169067, 0.11806152015924454,
    0.22483909130096436, 0.14742328226566315, 0.17533311247825623, 0.6303519606590271,
    0.5402778387069702, 0.1303555965423584, 0.23903653025627136, 0.5805871486663818,
    0.5386828184127808, 0.11733809113502502, 0.03730492666363716
]


# 加载银行重要性数据
#  引入外部资产作为银行的重要性

year = "2022"
country = "China"
type = 2
ratio = "train0.6_val0.15_test0.25"

country_name = "America_2022"
# 加载银行重要性数据
normalized_importance_values, max_importance_value = load_bank_importance(
    f'../Foreigh/data/{country_name}/{country}_bank_assets.csv')
# 计算四分位

# Calculate the weighted overall risk probability
weighted_risk_probabilities, weighted_overall_risk_percentage = estimate_weighted_risk_probability(
    US_inital ,  normalized_importance_values)

print(weighted_overall_risk_percentage)